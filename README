General
-------

Hydra is a process management system for starting parallel jobs,
especially MPICH2 jobs. Hydra is designed to natively work with
multiple daemons such as ssh, pbs, slurm and sge. However, in the
current release, only ssh and fork are supported.

More detailed documentation of the internal workings of Hydra are
available here:
http://wiki.mcs.anl.gov/mpich2/index.php/Hydra_Process_Management_Framework


Quick Start
-----------

To use hydra, mpich2 needs to be configured with the configure option
--with-pm=hydra.

Once MPICH2 has been built with Hydra, the Hydra commands are in
mpich2/bin, or the bin subdirectory of the install directory if you
have done an install.  You should put this (bin) directory in your
PATH in your .cshrc or .bashrc for usage convenience:

Put in .cshrc:  setenv PATH /home/you/mpich2/bin:$PATH

Put in .bashrc: export PATH=/home/you/mpich2/bin:$PATH

To compile your application use mpicc:

 $ mpicc app.c -o app

Create a file with the names of the machines that you want to run your
job on. This file may or may not include the local machine.

 $ cat hosts

   donner
   foo
   shakey
   terra

To run your application on these nodes, use mpiexec:

 $ mpiexec -f hosts -n 4 ./app

The host file can also be specified as follows:

 $ cat hosts

   donner:2
   foo:3
   shakey:2

In this case, the first 2 processes are scheduled on "donner", the
next 3 on "foo" and the last 2 on "shakey".


Environment settings
--------------------

HYDRA_HOST_FILE: This variable points to the default host file to use,
when the "-f" option is not provided to mpiexec.

  For bash:
    export HYDRA_HOST_FILE=<path_to_host_file>/hosts

  For csh/tcsh:
    setenv HYDRA_HOST_FILE <path_to_host_file>/hosts


Bootstrap servers
-----------------

Hydra supports SSH and FORK bootstrap servers to launch processes. You
can pick these through the mpiexec option --bootstrap:

 $ mpiexec --bootstrap ssh -f hosts -n 4 ./app

 (or)

 $ mpiexec --bootstrap fork -f hosts -n 4 ./app

This can also be controlled by using the HYDRA_BOOTSTRAP environment
variable.

The default bootstrap server is ssh.


Process-core binding
--------------------

We support multiple modes of process-core binding: round-robin ("rr"),
buddy-allocation ("buddy"), closest packing ("pack") and user-defined
("user"). These can be selected as follows:

 $ mpiexec --binding rr -f hosts -n 8 ./app

 ... or ...

 $ mpiexec --binding pack -f hosts -n 8 ./app

Consider the following layout of processing elements in the system
(e.g., two nodes, each with two processors, and each processor with
two cores). Suppose the Operating System assigned processor IDs for
each of these processing elements are as shown below:

__________________________________________      __________________________________________
|  _________________    _________________  |    |  _________________    _________________  | 
| |  _____   _____  |  |  _____   _____  | |    | |  _____   _____  |  |  _____   _____  | |
| | |     | |     | |  | |     | |     | | |    | | |     | |     | |  | |     | |     | | |
| | |     | |     | |  | |     | |     | | |    | | |     | |     | |  | |     | |     | | | 
| | |  0  | |  2  | |  | |  1  | |  3  | | |    | | |  0  | |  1  | |  | |  2  | |  3  | | |
| | |     | |     | |  | |     | |     | | |    | | |     | |     | |  | |     | |     | | |
| | |_____| |_____| |  | |_____| |_____| | |    | | |_____| |_____| |  | |_____| |_____| | |
| |_________________|  |_________________| |    | |_________________|  |_________________| |
|__________________________________________|    |__________________________________________|


In this case, the binding options are as follows:

RR: 0, 1, 2, 3 (use the order provided by the OS)
Buddy: 0, 1, 2, 3 (increasing sharing of resources)
Pack: 0, 2, 1, 3 (closest packing)
User: as defined by the user

Within the user-defined binding, two modes are supported: command-line
and host-file based. The command-line based mode can be used as
follows:

 $ mpiexec --binding user:0,3 -f hosts -n 4 ./app

In this case, the first two processes are bound to the processing
elements specified, while the last two are not bound at all. The
mapping is the same for all machines, so if the application is run
with 8 processes, the first 2 processes on "each machine" are bound to
processing elements as specified.

The host-file based mode for user-defined binding can be used by the
"map=" argument on each host line. E.g.:

 $ cat hosts

   donner:4    map=1,2,3,4
   foo:4       map=4,3,2,1
   shakey:2

Using this method, each host can be given a different mapping. Note
that the last line does not have any mapping: in this case, the
processes on that machine are not bound to any core.


X Forwarding
------------

X-forwarding is specific to each bootstrap server. Some servers do it
by default, while some don't. For ssh, this is disabled by default. To
enable it, you should use the option --enable-x to mpiexec.

 $ mpiexec --enable-x -f hosts -n 4 ./app
